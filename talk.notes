
----------------------------------------------------------------------
"A day with programming is a day wasted"

Thank you for inviting me here today.
My name.
School with Mr. Greaves. Same maths class. Did our 'O' levels (what they call GCSEs now!)
Manchester University: studiesd Maths and Computer Science.
After that I started work as a software engineer, or programmer.
And for my entire career, at a variety of different places, I've worked as a programmer.
Which I love.

Love programming. My job and sometimes my hobby.

Computer Science. What is that? I don't really know before university...
3 aspects
- Maths: Using maths to study our programs. Are they correct? How fast will they run?
- Science: Measuring and observing our program. Like a Physicist might study forces of nature.
- Engineering: Using skill and experience to craft s/w artifacts. Like a bridge builder, or author.

Hopefully today we'll get a chance to see all 3 of these aspects.

----------------------------------------------------------------------
"Fibonacci Sequence"

This talk will show some links between maths and programming.
Take as our main example, a sequence of numbers you may be familiar with.

Who has seen or heard of this before?
See the pattern?

Use Programming to explore this mathmatical sequence.
Use Maths to understand the behaviour of our program.

----------------------------------------------------------------------
"Rule for the next element of the sequence"

Each element is computed by adding the two numbers before it.
Starting with 0,1 (or sometimes people start at 1,1)
fib(1) = 1, fib(2) = 1, fib(3) = 2.... fib(5) = 5, fib(6) = 8 ...

Discovered/Invented in 1202s by "Fibonacci"
while he investigated a problem about how fast rabbits breed!

There are lots of interesting things related to the Fibonacci sequence
Today we are going to focus on the ration between successive elements of the sequence.
What do I mean by this?

----------------------------------------------------------------------
"Ratio sequence"

ratio of successive terms... 1,1 then 1,2 then 3,2...
the second term is always bigger that the first, so answer bigger that 1
not sequence of fractions... starts bouncing: 1, 2, 1&1/2, 1&2/3
then seems too start settling down.

Does it ever reach a particular numbers?...
Anyone know?

----------------------------------------------------------------------
"Golden ratio" 1.618...

Answer is yes. but it's not a nice simple number.
If you write it out in decimal you will never reach the end of the digits.
Anyone know another number like this?... PI
And like Pi, the golden ration is regarded as very special.
A constant of nature.
And because it's so special, like PI, it has a name & a symbol...

----------------------------------------------------------------------
"Phi symbol"

Phi. (spelt P.H.I, pronounced with an F) looks like this.. or this...

"Another Phi symbol"
"Phi Ring"

Why do people care about Phi?
Some people think this ration crops up throughout nature...

----------------------------------------------------------------------
"Spiral numbers"
"Shell"
"Sunflower"
"Plant"
"Galaxy"

and art...

----------------------------------------------------------------------
"Mona Lisa"
"Donald"

- getting a bit silly

----------------------------------------------------------------------
"Phi value again"
phi = 1.618...

Summary. This is the value of the golden ratio.
The ratio between successive terms of the fib sequence.

Anyway. Lets get back to the Fibonacci sequence itself...
First. Lets recap how it is generated

----------------------------------------------------------------------
"Maths seq rule"

Subscripts mean element number in the sequence.
Anything missing? -- basecase!

----------------------------------------------------------------------
"First 29"

10th... 55
20th... 6765

so... how would we go about calculating more and more terms of this sequence
say I want the... 200th element.

Could we do that on paper?
How long would it take us?
Do you think we could do it without making mistakes?
Probably not.
And it would be pretty tedious.

So, what else could we do?.... Of course write a program!

----------------------------------------------------------------------
"a wasted day again"

open python interpreter.
programming is about computing with functions.
a function is a define rule from inputs to outputs
basic things like addition and multiplication are functions.
but so are fib numbers: a function from sequence number to value

----------------------------------------------------------------------
"Trivial (x2) function example"
"General function machine"

When we define functions as programs. We can ask question. And get answers
+, *, ==

CODE FIB
code fib with two basecases 0/1
talk about base cases & recursion

load in interpreter: test: fib 0,1,2...
code loop. range(1,38). biggest 37

slow; not good;
who wants to wait?
who thinks we'll get to 200 if we wait long enough?

how slow? timings - explain time... diffs
make loop be self timing.
fib(37) ... 4.96s

anyone notice anything about times?...
how much it slow done by each step. not a constant amount
but by a multiplicative factor
how big is that factor... seems less than 2

do some divisions to be more precise...
pick a couple to divide... ask audience to do division?
or do it on python calc.

hopefully get answers close to phi
make prediction for future term: fib(40)... based on fib(37) & PHI
4.96 * 1.618 ** 3 --> 21s
time it on watch... get audience to time it on watch
so, it seems that for some reason the golden ration has shown up
its the multiplicative factor in time to compute a step vs the next step

how long for fib(50), fib(100) ?
fib(50) : 1.618 ** 10 * 21 /60 --> 43 minutes
fib(100) : 1.618 ** 60 * 21 /60 /60 /24 /365 --> 2.3 million years

----------------------------------------------------------------------
"Sun in 7 billion years"

who know what happens in 7 billion year? sun goes supa-nova
and maybe consumes the earth

so that 3000x times even longer
which fib term do you think we could get to by then? -- 117

ok, so it seems fib(200) is out of the question

but hang on. aren't computer supposed to be fast?!
we reckoned we could do it on paper in an afternoon
why is out program taking so long??

In a nutshell: it is asking the same question over and over again..

----------------------------------------------------------------------
"fib(5) tree picture"

talk about it... repeated work
at each level the size of the tree is almost double the size of the level below
not quite double... but 1.618x the size !!
that magic golden ration that shows up everywhere

----------------------------------------------------------------------
"Addition rule many steps"

This is how humans compute the fibonacci nunbers.
Can we make a program that uses teh same approach?.. yes
ok, so fix our program....
code loop... compare values... run.. quick!

----------------------------------------------------------------------
"EXponential vs Linear"

As well as writing programs to compute mathematical functions.
We can use maths to think about our programs. In particular, how long they will take to run.

Tahe branch of computer science dedicated to thinking about this is called "Complexity Theory"

Today we saw that if you have an algorithm with "exponential" complexity
it really doesn't matter how fast your computer is, or how long you wait.
Very soon you will reach a value you cannot compute.
But an algorithm with "Linear" complexity can compute very quickly.

----------------------------------------------------------------------
"A day wasted one last time"
